#!/usr/bin/env node

var fs = require( 'fs' );
var readline = require( 'readline' );
var request = require( 'request' );

[ 'KKV_HOST', 'KKV_USERNAME', 'KKV_PASSWORD' ].forEach( ( envar ) => {
  if ( !process.env[ envar ]  ) {
    throw new Error( envar + ' environment variable not found.' );
  }
} );

function invoke_kkv_upload( files )
{
  var args = {
    'kkv_host': process.env[ 'KKV_HOST' ],
    'kkv_username': process.env[ 'KKV_USERNAME' ],
    'kkv_password': process.env[ 'KKV_PASSWORD' ],
    'user': process.env[ 'TRPZ_USERNAME' ],
    'pass': process.env[ 'TRPZ_PASSWORD' ]
  };

  var endpoint = process.env[ 'WSK_KKV_UPLOAD_ENDPOINT' ];
  var auth_data = process.env[ 'WSK_AUTH' ];

  const MAX_UPLOADER_LAMBDAS = 40;
  var lambda_count = ( files.length < MAX_UPLOADER_LAMBDAS ) ? files.length : MAX_UPLOADER_LAMBDAS;
  var file_per_lambda = Math.ceil( files.length / lambda_count );

  return Promise.all( [...Array(lambda_count).keys()].map( ( lambda_index ) => {
    return new Promise( ( resolve, reject ) => {
      var this_files = files.slice( lambda_index * file_per_lambda, ( lambda_index + 1 ) * file_per_lambda );
      var new_args = Object.assign( {}, args );
      new_args.files = this_files;
      //console.log( this_files.length );

      request.post( {
        'url': endpoint + '?blocking=true&result=true',
        'body': new_args,
        'json': true,
        'auth': {
          'username': auth_data.split( ':' )[ 0 ],
          'password': auth_data.split( ':' )[ 1 ]
        }
      }, ( err, response, body ) => {
        if ( err || response.statusCode != 200 ) {
          console.log( response.statusCode );
          console.error( body );
          return reject( err );
        }

        resolve();
      } );
    } );
  } ) );
}

Promise.resolve()
  .then( () => {
    var rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
      terminal: false
    });

    var files = []

    rl.on( 'line', ( input ) => {
      if ( !input.trim().length ) {
        return;
      }

      var data = input.trim().split( ' ' );

      files.push( {
        'key': data[ 0 ],
        'url': data[ 1 ]
      } );
    } );

    return new Promise( ( resolve, reject ) => {
      rl.on( 'close', () => {
        invoke_kkv_upload( files )
          .then( () => {
            resolve();
          } );
      } );
    } );
  } )
  .catch( ( reason ) => {
    console.log( reason );
    process.exit( 1 );
  } );
