#!/usr/bin/env node

var readline = require( 'readline' );
var https = require( 'https' );
var request = require( 'request' );

[ 'KKV_HOST', 'KKV_USERNAME', 'KKV_PASSWORD',
  'AWS_ACCESS_KEY_ID', 'AWS_SECRET_ACCESS_KEY',
  'GG_S3_BUCKET', 'WSK_KKV_DOWNLOAD_ENDPOINT' ].forEach( ( envar ) => {
  if ( !process.env[ envar ]  ) {
    throw new Error( envar + ' environment variable not found.' );
  }
} );

var kkv_host = process.env[ 'KKV_HOST' ];
var kkv_username = process.env[ 'KKV_USERNAME' ];
var kkv_password = process.env[ 'KKV_PASSWORD' ];

function invoke_kkv_download( files )
{
  var args = {
    'files': files,
    'kkv_host': process.env[ 'KKV_HOST' ],
    'kkv_username': process.env[ 'KKV_USERNAME' ],
    'kkv_password': process.env[ 'KKV_PASSWORD' ],
    'aws_access_key': process.env[ 'AWS_ACCESS_KEY_ID' ],
    'aws_secret_key': process.env[ 'AWS_SECRET_ACCESS_KEY' ],
    's3_bucket': process.env[ 'GG_S3_BUCKET' ]
  };

  var endpoint = process.env[ 'WSK_KKV_DOWNLOAD_ENDPOINT' ];
  var auth_data = process.env[ 'WSK_AUTH' ];

  request.post( {
    'url': endpoint,
    'headers': {
      'Content-Type': 'application/json',
    },
    'auth': {
      'username': auth_data.split( ':' )[ 0 ],
      'password': auth_data.split( ':' )[ 1 ]
    }
  }, ( err, response, body ) => {
    if ( err || response.code != 200 ) {
      console.error( 'kkv-download failed.' );
      process.exit( 1 );
    }
  } );
}

Promise.resolve()
  .then( () => {
    var rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
      terminal: false
    });

    var files = []

    rl.on( 'line', ( input ) => {
      var data = input.trim();

      if ( !data.length ) {
        return;
      }

      files.push( {
        'key': data,
      } );
    } );

    return new Promise( ( resolve, reject ) => {
      rl.on( 'close', () => {
        invoke_kkv_download( files )
          .then( () => {
            resolve();
          } );
      } );
    } );
  } )
  .then( () => kvstore.close() )
  .catch( ( reason ) => {
    console.log( reason );
    kvstore.close();
    process.exit( 1 );
  } );
