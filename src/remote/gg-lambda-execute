#!/usr/bin/env python3.6

import os
import sys
import fcntl
import logging
import json
import stat
import errno
import pprint
import boto3

import gg
import gg_pb2

from base64 import b64decode, b64encode
from ggpaths import GGPaths, GGCache
from common import make_executable, is_executable, sizeof_fmt

s3_bucket = os.environ.get('GG_S3_BUCKET')
s3_region = os.environ.get('GG_S3_REGION', 'us-west-1')

def main():
    thunk_hash = sys.argv[1]

    if GGCache.check(thunk_hash):
        return os.EX_OK

    thunk = gg.read_thunk(thunk_hash)

    with open(GGPaths.blob_path(thunk_hash), "rb") as fin:
        thunk_data = fin.read()

    infiles = [{'hash': i.hash,
                'executable': i.type == gg_pb2.InFile.Type.Value('EXECUTABLE'),
                'size': i.size}
               for i in thunk.infiles
               if i.type != gg_pb2.InFile.Type.Value('DUMMY_DIRECTORY')]

    request_payload = {
        'thunk_hash': thunk_hash,
        's3_bucket': s3_bucket,
        'infiles': infiles,
        'thunk_data': b64encode(thunk_data).decode('ascii')
    }

    response = boto3.client('lambda', region_name=s3_region).invoke(
        FunctionName='ggfunction',
        InvocationType='RequestResponse',
        Payload=json.dumps(request_payload),
        LogType='Tail',
    )

    if response.get('StatusCode', 0) / 100 != 2 or 'FunctionError' in response:
        print(b64decode(response.get('LogResult')).decode('utf-8'), file=sys.stderr)
        raise Exception('Lambda exceution failed.')

    response_payload = json.loads(response['Payload'].read())
    output_hash = response_payload['output_hash']

    GGCache.insert(thunk_hash, output_hash)
    print('\u03bb({:.12}) => {:.12}'.format(thunk_hash, output_hash), file=sys.stderr)

    return os.EX_OK

def usage(argv0):
    print("usage: {} THUNK-HASH".format(argv0), file=sys.stderr)

def init():
    if not s3_bucket:
        raise Exception("GG_S3_BUCKET environment variable not set")

    if len(sys.argv) != 2:
        usage(sys.argv[0])
        sys.exit(os.EX_USAGE)

if __name__ == '__main__':
    try:
        init()
        sys.exit(main())
    except Exception as ex:
        print(ex, file=sys.stderr)
        import traceback; traceback.print_exc()
        sys.exit(1)
